/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.isu.cs3321.Up_to_Code.app;

import com.google.gson.Gson;
import io.javalin.Javalin;
import io.javalin.core.util.FileUtil;

import java.util.ArrayList;
import java.util.List;

import static edu.isu.cs3321.Up_to_Code.app.DatabaseManagement.*;
import static edu.isu.cs3321.Up_to_Code.app.GsonSerialization.serialize;


public class App {
    public static void main(String[] args) {
        Javalin app = Javalin.create().start(7000);

        //practice catalog - needs to return the json payload with all practices in folder
        app.get("/api/practice/catalog", ctx -> ctx.json("temp"));

        //practice creator - needs to provide server with screenshot for storage
        app.post("/api/practice/upload", ctx -> {
            ctx.uploadedFiles("file").forEach(file -> {
                FileUtil.streamToFile(file.getContent(), "practices/" + file.getFilename());
            });
            ctx.result("done");
        });

        //card catalog - needs to return all a json payload with all cards in alpha or states tables
        app.get("/api/card/catalog", ctx -> ctx.json("temp"));

        //card creator - needs to provide server with wide and small card variable (alpha name, cardType, states1-6, brief, detailed, contents of each checklist)
        app.post("/api/card/create/small", ctx -> System.out.println(ctx.body().toString()));

        //games - need list of all available alphas, needs json payload with selected alpha and associated state cards
        app.get("/api/card/list", ctx -> ctx.html("Hello World!"));

        //chase the state - needs to provide server with array of played state card values to generate charts
        app.get("/api/card/retrieve", ctx -> ctx.html("Hello World!"));

        app.get("/api/status", ctx -> ctx.result("Online"));


        /*Alpha a = new Alpha("test", "i am testing", "I am testing gson", "blue", null, false);
        State s = new State("test", null, 1, 1);
        CheckListItem c = new CheckListItem("item", 2);
        String alphaJson =serialize(a);
        addAlpha(alphaJson);
        String stateJson = serialize(s);
        addState(stateJson);
        String itemJson = serialize(c);
        addItem(itemJson);
        System.out.print(getChecklistItems());*/



        AlphaTableController a = new AlphaTableController("Alpha 1", "Testing Foreign Key", "Testing foreign key relationships between alpha and state", false, "blue");

        StateTableController s = new StateTableController("State 1", 1);
        StateTableController s1 = new StateTableController("State 2", 2);
        ChecklistTableController c = new ChecklistTableController("Foreign key");
        a.addState(s);
        a.addState(s1);

        System.out.println("test");
        System.out.print(a);
        String alphaJson = serialize(a);
        addAlpha(alphaJson);


        /*String test = "this currently does nothing";
        addAlpha(test);
        addState(test);
        addItem(test);
        System.out.print(getAlphas());
        System.out.print(getStates());
        System.out.print(getChecklistItems());*/
    }
}
